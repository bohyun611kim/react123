<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans"
	 	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="
					http://www.springframework.org/schema/beans
					http://www.springframework.org/schema/beans/spring-beans.xsd
					http://www.springframework.org/schema/context
					http://www.springframework.org/schema/context/spring-context.xsd
					http://www.springframework.org/schema/util
					http://www.springframework.org/schema/util/spring-util.xsd
					" >

	<!-- Redis Spring Session Configuration -->
	<context:annotation-config/>
	<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration" />
 	<bean class="org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory"
			p:hostName="${redis.hostName}"
			p:port="${redis.port}"
			p:password="${redis.password}"
			p:database = "0"
	/>   
	
	<!-- 세션 만료 이벤트를 받기 위해 주석 처리 -->
	<!-- <util:constant static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP" /> -->

	<!-- Jedis Connection Pool configuration -->
	<bean  id="jedisSessionPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
     	   p:maxTotal="${redis.maxTotal}"
    	   p:maxIdle="${redis.maxIdle}"
	/>
	 
	<bean id="connectionFactory" primary="true" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" 
			p:hostName="${redis.hostName}" 
			p:password="${redis.password}"
			p:port="${redis.port}"
			p:timeout="${redis.timeout}" 
	/> 

	<!-- Redis session -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
           p:connectionFactory-ref="connectionFactory"
    />
    
    <!-- Redis message -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${messaging.redis.hostname}" 
		p:port="${messaging.redis.port}"/>

	<bean id="redisMsgTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
	</bean>   

    <!-- ////////////////////////////REDIS Serializer ////////////////////////////// -->
    <bean id="genericToStringSerializer" class="org.springframework.data.redis.serializer.GenericToStringSerializer">
		<constructor-arg>
			<value>java.lang.Object</value>
		</constructor-arg>
	</bean>
	
	<bean id="jackson2JsonRedisSerializer" class="org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer">
		<constructor-arg>
			<value>java.util.Map</value>
		</constructor-arg>
	</bean>
    
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate" 
    		p:connection-factory-ref="connectionFactory" 
    		p:valueSerializer-ref="jackson2JsonRedisSerializer"/>
	
	<!-- session 관련 이벤트 catch를 위한 listener -->
	<bean class="org.springframework.security.web.session.HttpSessionEventPublisher"/>
    		
</beans> 